plugins {
    id 'org.springframework.boot' version '2.4.5'
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id "io.freefair.lombok" version "5.3.3.3"
    id 'java-library'
    id 'maven-publish'
}

project(":") {
    group = 'com.barrier'
    version = '0.0.1'
    sourceCompatibility = '15'

    jar {
        enabled(true)
    }

    bootJar {
        enabled(false)
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    lombok {
        version = "1.18.10"
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    publishing {
        repositories {
            maven {
                name = 'nexus'
                url = "http://localhost/nexus/content/repositories/releases"
                credentials {
                    username = "admin"
                    password = "admin"
                }
            }
        }
        publications {
            lib(MavenPublication) {
                from components.java
            }
        }
    }

    dependencies {
        api 'org.springframework.boot:spring-boot-starter'
        api 'org.springframework.boot:spring-boot-starter-web'
        api 'org.springframework.boot:spring-boot-starter-aop'
        api 'org.springframework.boot:spring-boot-autoconfigure'
        api 'org.springframework.boot:spring-boot-configuration-processor'
        api 'com.google.guava:guava:30.1.1-jre'
        api 'commons-beanutils:commons-beanutils:1.9.4'

        implementation 'net.logstash.logback:logstash-logback-encoder:6.+'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    pmd {
        toolVersion = '6.31.0'
        ruleSetFiles = files('config/pmd.xml')
        ruleSets = []
        consoleOutput = true
    }

    checkstyleMain {
        configFile = file('config/checkstyle.xml')
        maxWarnings = 0
        maxErrors = 0
    }

    checkstyleTest {
        configFile = file('config/checkstyle.xml')
        maxWarnings = 0
        maxErrors = 0
    }

    jacoco {
        toolVersion = "0.8.6"
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            html.enabled true
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                'com/scaffold/BootApplication.class',
                                'com/scaffold/api/diagnosis/DatabaseHealthCheck.class',
                                'com/scaffold/api/IndexController'
                        ]
                )
            }))
        }
    }

    jacocoTestCoverageVerification {
        dependsOn 'jacocoTestReport'

        violationRules {
            rule {
                element = 'CLASS'
                limit {
                    minimum = 1.0
                }
                excludes = [
                        'com.scaffold.BootApplication',
                        'com.scaffold.api.diagnosis.DatabaseHealthCheck',
                        'com.scaffold.api.IndexController'
                ]
            }
        }
    }
}
